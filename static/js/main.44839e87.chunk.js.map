{"version":3,"sources":["util/createScreen.js","screen/system/DeadlineRenderSystem.js","util/parallaxCalculator.js","screen/system/BgRenderSystem.js","screen/system/ParticleSystem.js","screen/system/WallSystem.js","screen/system/WallRenderSystem.js","screen/system/PlayerRenderSystem.js","screen/system/ObstacleSystem.js","screen/system/ObstacleRenderSystem.js","screen/system/DebuffRenderSystem.js","screen/system/WatchSystem.js","screen/system/WatchRenderSystem.js","util/glyphLayout.js","util/loadFontFile.js","util/coordUtil.js","screen/genderEndScreen.js","screen/coinRenderSystem.js","screen/system/BuffListRenderSystem.js","screen/specialRenderSystem.js","screen/testScreen.js","screen/genderInstructionScreen.js","screen/genderChoosingScreen.js","index.js"],"names":["noop","createScreen","update","destroy","createDeadlineRenderSystem","width","height","deadLineAtlas","batch","deadlineBackGradient","findRegion","deadlineFrontGradient","singleNote","singlePaper","deadlineBase","singlePaperStackFrame","paperStackAnimation","createAnimation","findRegions","PARTICLE_SIZE","BG_WIDTH","BACK_GRADIENT_HEIGHT","BACK_GRADIENT_Y","BASE_HEIGHT","BASE_Y","FRONT_GRADIENT_HEIGHT","FRONT_GRADIENT_Y","PAPER_STACK_WIDTH","PAPER_STACK_HEIGHT","PAPER_STACK_Y","PAPER_STACK_ANIMATION_DELAY","i","Math","random","deadlineParticleTime","deadLineParticleRate","deadlineParticles","DEADLINE_PARTICLE_SPEED","DEADLINE_PARTICLE_DECELERATOR","setDeadLineParticleRate","rate","getDeadLineParticleRate","delta","stateTime","type","push","x","y","size","speedY","rotation","PI","particle","expired","length","splice","draw","PAPER_STACK_COUNT","getKeyFrame","PlayMode","LOOP_PINGPONG","results","calculateParallaxByOffset","displaySize","texSize","offset","current","startPoint","createBgRenderSystem","bg1","bg2","BG1_HEIGHT","BG2_HEIGHT","gap","drawStarts","drawStart","createParticleSystem","_height","noteTex","PLAYER_SIZE","particles","particleTime","PARTICLE_RANGE","duration","t","alpha","setColor","createWallSystem","wallStarts","obstacles","WALL_LENGTH","WALL_THICKNESS","latestWallStartGenerated","OBSTACLE_SIZE","screenY","floor","wallIndex","obstacleWidth","obstacleHeight","createWallRenderSystem","whiteTex","wallStart","fillRect","createPlayerRenderSystem","characterAtlas","slashAtlas","obstacleAtlas","watchAtlas","gender","outfit","runAnimationName","jumpAnimationName","runFrames","jumpFrames","runAnimation","jumpAnimation","transitionAnimation","slice","slashFrames","slashAnimation","buffAnimation","SLASH_X","SLASH_WIDTH","SLASH_HEIGHT","firstJump","flipped","jumping","jumpStart","buffTime","currentOutfit","transitionTime","specialTime","updateOutfit","originX","scaleX","NORMAL","LOOP","frame","createObstacleSystem","PROJECTILE_SPEED","PROJECTILE_SIZE","tmp","Vector2","obstacle","fired","abs","projectilePos","vel","set","rotateRad","projectileVel","projectileSize","projectileStart","setVector","scale","addVector","OBSTACLE_NAMES","createObstacleRenderSystem","animations","idleAnimations","bulletAnimations","projectileHitAnimation","coinAnimation","frames","hit","projectileHit","projectileHitTime","createDebuffRenderSystem","debuffs","obstacleHitBaseName","OBSTACLE_HIT_TYPE_NAME","sampleFrame","DEBUFF_WIDTH","DEBUFF_HEIGHT","obstacleHitAnimations","regions","debuff","time","offsetY","createWatchSystem","watches","WATCH_SIZE","timeUntilNextWatch","timeRandom","drawX","drawY","drawScale","createWatchRenderSystem","watchAnimations","watch","hitTime","checkKerning","id1","id2","kerningsData","check","amount","kerning","first","second","GlyphLayour","pageImage","keringsData","canvasWidth","addToCache","line","px","py","lineBreak","lineH","xAdvance","index","currChar","charCodeAt","preChar","key","kerningAmount","cache","xoffset","yoffset","xadvance","beforeDrawing","posX","posY","fontSize","CharSequence","preDraw","spaceXadvance","tmpLength","tmplist","char","maxSeq","max","newbase","baseLine","listCharSeq","trim","split","map","s","si","oriWidth","tmpRatio","fixedWidth","lineHeight","accumulate","tmpChar","j","key2","substring","id","positionBreak","lastBreakIndex","key3","getPositionBasedOnMode","lastLine","tmpXadvance","lastKey","oriHeight","align","round","setAlignMode","mode","setType","setLineHeight","setFixedGlyphWidth","fixedW","this","base","position","newBase","AlignMode","TextType","concatAndResolveUrl","url","concat","url1","url2","url3","l","pop","join","gl","packFileUrl","textureOptions","a","fetch","then","res","text","packFileContent","pages","regionsData","lines","tmp_array","push_to_kerning","undefined","tuple","filter","item","parseInt","left","top","page","region","id_page","face","bold","italic","charset","unicode","stretchH","smooth","aa","padding","spacing","outline","scaleW","scaleH","num_of_pages","packed","alphaChnl","redChnl","greenChnl","blueChnl","page_id","file","loadTexture","texture","invTextWidth","invTextHeight","regionData","invTexWidth","invTexHeight","TextureRegion","getLineHeight","getPages","getRegions","setNewText","checkPointInsideRect","point","verts","DEVICE_PIXEL_RATIO","minX","min","maxX","minY","maxY","createEndScreen","Game","coinCount","distance","goToChoosingScreen","createGenderChoosingScreen","setCurrentScreen","canvas","font","endScreen","assets","achive1","achive2","achive3","createWhiteTex","inputHandler","InputHandler","createBatch","camera","createOrthoCamera","girl","man","girl_size","man_size","coin","lengthHaveGone","watchCount","playAgain","eScreenH","eScreenW","achiveH","achiveW","ratio_list","rest_ratio","startCount","girlY","manY","link_rect","reset_rect","addEventListener","window","location","href","setPosition","setProjection","combined","begin","end","cleanup","renderCoin","coinImage","coinW","coinH","createBuffListRenderSystem","watchList","watchSize","tmpDistance","buffs","state","specialButton","button","buttonR","createTestScreen","JUMP_SPEED_X","hasBuff","hasSpecial","speedX","NORMAL_SPEED_Y","targetGap","INITIAL_GAP","checkTouch","useSpecial","jump","document","checkLanding","newX","landing","processPlayerPos","modifier","deltaX","processWatchCollsion","pL","pR","pT","pB","oL","oR","oT","oB","processObstacleCollision","hitted","oWidth","oHeight","pos","deadlineRenderSystem","MAXIMUM_DEADLINE_RATE","OUTFIT_COIN_REQUIRED","SPEED_MODIFIERS","processOutfit","bgRenderSystem","particleSystem","wallSystem","wallRenderSystem","playerRenderSystem","obstacleSystem","obstacleRenderSystem","debuffRenderSystem","watchSystem","watchRenderSystem","CoinRender","buffRender","check_lost","removeEventListener","createInstructionScreen","goToGameScreen","instruction","instrucH","instrucW","text1","text2","text3","fontsize","goToInstructionScreen","newText","title","woman","tray","BG_HEIGHT","HUMAN_HEIGHT","WOMAN_WIDTH","MAN_WIDTH","TRAY_WIDTH","TRAY_HEIGHT","trayX","trayY","man_rect","woman_rect","getElementById","loading","resizeCanvas","getContext","loadFontFile","pixelRatio","screen","currentScreen","count","innerHTML","doAndCount","promise","result","Promise","all","loadAtlas","manjump","style","display","clearColor","clear","COLOR_BUFFER_BIT","createGameLoop","init"],"mappings":"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","file":"static/js/main.44839e87.chunk.js","sourcesContent":["const noop = () => {};\n\nconst createScreen = ({ update = noop, destroy = noop }) => {\n  return { update, destroy };\n};\n\nexport default createScreen;\n","import { createAnimation } from 'gdxjs';\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\n\nexport const createDeadlineRenderSystem = (width, height, deadLineAtlas, batch) => {\n  const deadlineBackGradient = deadLineAtlas.findRegion('deadline-back-gradient');\n  const deadlineFrontGradient = deadLineAtlas.findRegion('deadline-front-gradient');\n  const singleNote = deadLineAtlas.findRegion('single-note');\n  const singlePaper = deadLineAtlas.findRegion('single-paper');\n  const deadlineBase = deadLineAtlas.findRegion('deadline-base');\n  const singlePaperStackFrame = deadLineAtlas.findRegion('paper_stack');\n  const paperStackAnimation = createAnimation(0.1, deadLineAtlas.findRegions('paper_stack'));\n\n  const PARTICLE_SIZE = width / 30;\n  const BG_WIDTH = width;\n  const BACK_GRADIENT_HEIGHT = (BG_WIDTH / deadlineBackGradient.width) * deadlineBackGradient.height;\n  const BACK_GRADIENT_Y = height - BACK_GRADIENT_HEIGHT;\n  const BASE_HEIGHT = (BG_WIDTH / deadlineBase.width) * deadlineBase.height;\n  const BASE_Y = height - BASE_HEIGHT / 2;\n  const FRONT_GRADIENT_HEIGHT = (BG_WIDTH / deadlineFrontGradient.width) * deadlineFrontGradient.height;\n  const FRONT_GRADIENT_Y = height - FRONT_GRADIENT_HEIGHT;\n\n  const PAPER_STACK_COUNT = 4;\n  const PAPER_STACK_WIDTH = width / PAPER_STACK_COUNT;\n  const PAPER_STACK_HEIGHT = (PAPER_STACK_WIDTH / singlePaperStackFrame.width) * singlePaperStackFrame.height;\n  const PAPER_STACK_Y = height - PAPER_STACK_HEIGHT;\n  const PAPER_STACK_ANIMATION_DELAY = [];\n  for (let i = 0; i < PAPER_STACK_COUNT; i++) {\n    PAPER_STACK_ANIMATION_DELAY[i] = Math.random() * 0.5;\n  }\n\n  let deadlineParticleTime = 0;\n  let deadLineParticleRate = 0.15;\n  const deadlineParticles = [];\n  const DEADLINE_PARTICLE_SPEED = -height / 2;\n  const DEADLINE_PARTICLE_DECELERATOR = height * 0.75;\n\n  return {\n    setDeadLineParticleRate(rate) {\n      deadLineParticleRate = rate;\n    },\n    getDeadLineParticleRate() {\n      return deadLineParticleRate;\n    },\n    update(delta, stateTime) {\n      deadlineParticleTime += delta;\n      while (deadlineParticleTime >= deadLineParticleRate) {\n        deadlineParticleTime -= deadLineParticleRate;\n        const type = Math.random() > 0.5 ? 0 : 1;\n        deadlineParticles.push({\n          x: Math.random() * width,\n          y: height,\n          size: type === 0 ? PARTICLE_SIZE * 2 : PARTICLE_SIZE,\n          speedY: DEADLINE_PARTICLE_SPEED,\n          type,\n          rotation: (Math.random() * Math.PI) / 2\n        });\n      }\n\n      for (let particle of deadlineParticles) {\n        particle.speedY += DEADLINE_PARTICLE_DECELERATOR * delta;\n        particle.y = particle.y + particle.speedY * delta;\n        if (particle.y > height) {\n          particle.expired = true;\n        }\n      }\n\n      for (let i = deadlineParticles.length - 1; i >= 0; i--) {\n        if (deadlineParticles[i].expired) {\n          deadlineParticles.splice(i, 1);\n        }\n      }\n\n      deadlineBackGradient.draw(batch, 0, BACK_GRADIENT_Y, BG_WIDTH, BACK_GRADIENT_Y);\n      deadlineBase.draw(batch, 0, BASE_Y, BG_WIDTH, BASE_HEIGHT);\n      for (let i = 0; i < PAPER_STACK_COUNT - 1; i++) {\n        paperStackAnimation\n          .getKeyFrame(stateTime + PAPER_STACK_ANIMATION_DELAY[i], PlayMode.LOOP_PINGPONG)\n          .draw(batch, PAPER_STACK_WIDTH * i + PAPER_STACK_WIDTH / 2, PAPER_STACK_Y - PAPER_STACK_HEIGHT / 8, PAPER_STACK_WIDTH, PAPER_STACK_HEIGHT);\n      }\n      for (let particle of deadlineParticles) {\n        (particle.type === 0 ? singlePaper : singleNote).draw(\n          batch,\n          particle.x,\n          particle.y,\n          particle.size,\n          particle.size,\n          particle.size / 2,\n          particle.size / 2,\n          particle.rotation\n        );\n      }\n      for (let i = 0; i < PAPER_STACK_COUNT; i++) {\n        paperStackAnimation\n          .getKeyFrame(stateTime + PAPER_STACK_ANIMATION_DELAY[i], PlayMode.LOOP_PINGPONG)\n          .draw(batch, PAPER_STACK_WIDTH * i, PAPER_STACK_Y, PAPER_STACK_WIDTH, PAPER_STACK_HEIGHT);\n      }\n      deadlineFrontGradient.draw(batch, 0, FRONT_GRADIENT_Y, BG_WIDTH, FRONT_GRADIENT_HEIGHT);\n    }\n  };\n};\n","const results = [];\n\nexport const calculateParallaxByOffset = (displaySize, texSize, offset) => {\n  results.length = 0;\n  let current = offset;\n  while (current > displaySize) {\n    current -= texSize;\n  }\n  while (current < -texSize) {\n    current += texSize;\n  }\n  const startPoint = current;\n  do {\n    results.push(current);\n    current += texSize;\n  } while (current < displaySize);\n  current = startPoint;\n  while (current > 0) {\n    current -= texSize;\n    results.push(current);\n  }\n  return results;\n};\n\nexport const calculateParallaxBySpeed = (\n  stateTime,\n  displaySize,\n  texSize,\n  speed\n) => {\n  const offset = speed * stateTime;\n  return calculateParallaxByOffset(displaySize, texSize, offset);\n};\n","import { calculateParallaxByOffset } from '../../util/parallaxCalculator';\n\nexport const createBgRenderSystem = (width, height, bg1, bg2, batch) => {\n  const BG_WIDTH = width;\n  const BG1_HEIGHT = (BG_WIDTH / bg1.width) * bg1.height;\n  const BG2_HEIGHT = (BG_WIDTH / bg2.width) * bg2.height;\n\n  return {\n    update(delta, y, gap) {\n      let drawStarts = calculateParallaxByOffset(height, BG2_HEIGHT, (-y + gap) * 0.5);\n      for (let drawStart of drawStarts) {\n        batch.draw(bg2, 0, drawStart, BG_WIDTH, BG2_HEIGHT);\n      }\n\n      drawStarts = calculateParallaxByOffset(height, BG1_HEIGHT, -y + gap);\n      for (let drawStart of drawStarts) {\n        batch.draw(bg1, 0, drawStart, BG_WIDTH, BG1_HEIGHT);\n      }\n    }\n  };\n};\n","export const createParticleSystem = (width, _height, noteTex, batch, PLAYER_SIZE) => {\n  const particles = [];\n  let particleTime = 0;\n  const PARTICLE_RATE = 0.075;\n  const PARTICLE_DURATION = 3;\n  const PARTICLE_SIZE = width / 30;\n  const PARTICLE_RANGE = width / 7.5;\n\n  return {\n    update(delta, x, y, speedY) {\n      particleTime += delta;\n      while (particleTime >= PARTICLE_RATE) {\n        particleTime -= PARTICLE_RATE;\n        particles.push({\n          x: x + PLAYER_SIZE / 2 + (Math.random() - 0.5) * PARTICLE_RANGE,\n          y: y + PLAYER_SIZE / 2 + (Math.random() - 0.5) * PARTICLE_RANGE,\n          speedY: speedY / 2,\n          type: Math.random() < 0.3 ? 0 : Math.random() < 0.5 ? 1 : 2,\n          rotation: (Math.random() * Math.PI) / 2,\n          duration: Math.random() * PARTICLE_DURATION,\n          t: 0,\n          size: PARTICLE_SIZE\n        });\n      }\n\n      for (let particle of particles) {\n        particle.t += delta;\n        particle.y += particle.speedY * delta;\n      }\n      for (let i = particles.length - 1; i >= 0; i--) {\n        const particle = particles[i];\n        if (particle.t >= particle.duration) {\n          particles.splice(i, 1);\n        }\n      }\n    },\n    draw() {\n      for (let particle of particles) {\n        let alpha = (particle.duration - particle.t) / particle.duration;\n        alpha = alpha * alpha * (3 - 2 * alpha);\n        batch.setColor(0, 0, 0, 0.75 * alpha);\n        batch.draw(\n          noteTex,\n          particle.x - particle.size / 2 + particle.size / 5,\n          particle.y - particle.size / 2 + particle.size / 5,\n          particle.size,\n          particle.size,\n          particle.size / 2,\n          particle.size / 2,\n          particle.rotation\n        );\n        particle.type === 0 && batch.setColor(1, 0.494, 0.725, alpha);\n        particle.type === 1 && batch.setColor(0.478, 0.988, 1, alpha);\n        particle.type === 2 && batch.setColor(1, 0.969, 0.251, alpha);\n        batch.draw(\n          noteTex,\n          particle.x - particle.size / 2,\n          particle.y - particle.size / 2,\n          particle.size,\n          particle.size,\n          particle.size / 2,\n          particle.size / 2,\n          particle.rotation\n        );\n        batch.setColor(1, 1, 1, 1);\n      }\n    }\n  };\n};\n","export const createWallSystem = (width, height, wallStarts, obstacles, WALL_LENGTH, WALL_THICKNESS, gap) => {\n  let latestWallStartGenerated = WALL_LENGTH;\n  const obstacleChance = 0.4;\n  const OBSTACLE_SIZE = width / 10;\n\n  return {\n    update(delta, y, gap) {\n      const screenY = y + gap;\n      for (let i = wallStarts.length - 1; i >= 0; i--) {\n        const wallStart = wallStarts[i];\n        if (wallStart - WALL_LENGTH > screenY) {\n          wallStarts.splice(i, 1);\n        }\n      }\n      for (let i = obstacles.length - 1; i >= 0; i--) {\n        const obstacle = obstacles[i];\n        if (obstacle.y > wallStarts[0]) {\n          obstacles.splice(i, 1);\n        }\n      }\n      while (latestWallStartGenerated > screenY - 2 * height - WALL_LENGTH) {\n        latestWallStartGenerated -= WALL_LENGTH;\n        wallStarts.push(latestWallStartGenerated);\n        if (latestWallStartGenerated > -height) {\n          continue;\n        }\n        if (Math.random() <= obstacleChance) {\n          const type = Math.floor(Math.random() * 4);\n          const wallIndex = Math.random() > 0.5 ? 0 : 1;\n          const obstacleWidth = type === 0 ? OBSTACLE_SIZE * 3 : OBSTACLE_SIZE * 2;\n          const obstacleHeight = type === 0 ? OBSTACLE_SIZE / 2 : OBSTACLE_SIZE * 2;\n          obstacles.push({\n            wallIndex,\n            y: type === 0 ? latestWallStartGenerated - WALL_LENGTH : latestWallStartGenerated - WALL_LENGTH - obstacleHeight * 0.9,\n            type,\n            width: obstacleWidth,\n            height: obstacleHeight,\n            x: wallIndex === 0 ? WALL_THICKNESS : width - WALL_THICKNESS - obstacleWidth\n          });\n        }\n      }\n    }\n  };\n};\n","import { fillRect } from 'gdxjs';\n\nexport const createWallRenderSystem = (width, height, whiteTex, batch, wallStarts, WALL_LENGTH, WALL_THICKNESS) => {\n  return {\n    draw() {\n      batch.setColor(0, 0, 0, 0.75);\n      for (let wallStart of wallStarts) {\n        fillRect(batch, whiteTex, 0, wallStart - WALL_LENGTH, WALL_THICKNESS, WALL_LENGTH);\n        fillRect(batch, whiteTex, width - WALL_THICKNESS, wallStart - WALL_LENGTH, WALL_THICKNESS, WALL_LENGTH);\n      }\n      batch.setColor(1, 1, 1, 1);\n    }\n  };\n};\n","import { createAnimation } from 'gdxjs';\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\n\nexport const createPlayerRenderSystem = (width, height, batch, characterAtlas, slashAtlas, obstacleAtlas, watchAtlas, PLAYER_SIZE, gender, outfit) => {\n  let runAnimationName = `${gender === 0 ? 'man' : 'girl'}_running_${outfit + 1}`;\n  let jumpAnimationName = `${gender === 0 ? 'man' : 'girl'}_jump_${outfit + 1}`;\n  let runFrames = characterAtlas.findRegions(runAnimationName);\n  let jumpFrames = characterAtlas.findRegions(jumpAnimationName);\n  let runAnimation = createAnimation(0.05, runFrames);\n  let jumpAnimation = createAnimation(0.1, jumpFrames);\n\n  const updateOutfit = outfit => {\n    runAnimationName = `${gender === 0 ? 'man' : 'girl'}_running_${outfit + 1}`;\n    jumpAnimationName = `${gender === 0 ? 'man' : 'girl'}_jump_${outfit + 1}`;\n    runFrames = characterAtlas.findRegions(runAnimationName);\n    jumpFrames = characterAtlas.findRegions(jumpAnimationName);\n    runAnimation = createAnimation(0.05, runFrames);\n    jumpAnimation = createAnimation(0.1, jumpFrames);\n  };\n\n  const transitionAnimation = createAnimation(0.05, obstacleAtlas.findRegions('bullet_hit').slice(1, -1));\n  const slashFrames = slashAtlas.findRegions('slash');\n  const slashAnimation = createAnimation(0.03, slashFrames);\n  const buffAnimation = createAnimation(0.1, watchAtlas.findRegions('watch_buff'));\n\n  const SLASH_X = width * 0.1;\n  const SLASH_WIDTH = width * 0.8;\n  const SLASH_HEIGHT = (SLASH_WIDTH * slashFrames[0].height) / slashFrames[0].width;\n  let firstJump = true;\n\n  return {\n    draw(x, y, flipped, jumping, stateTime, jumpStart, buffTime, currentOutfit, transitionTime, specialTime) {\n      if (outfit !== currentOutfit) {\n        outfit = currentOutfit;\n        updateOutfit(outfit);\n      }\n      const originX = PLAYER_SIZE / 2;\n      const originY = 0;\n      const scaleX = flipped ? 1 : -1;\n\n      if (transitionTime > stateTime - 0.1) {\n        batch.setColor(0.478, 0.988, 1, 1);\n        transitionAnimation.getKeyFrame(stateTime - transitionTime, PlayMode.LOOP_PINGPONG).draw(batch, x, y, PLAYER_SIZE * 2, PLAYER_SIZE);\n        batch.setColor(1, 1, 1, 1);\n        return;\n      }\n\n      if (!firstJump) {\n        slashAnimation\n          .getKeyFrame(stateTime - jumpStart, PlayMode.NORMAL)\n          .draw(batch, SLASH_X, y, SLASH_WIDTH, SLASH_HEIGHT, SLASH_WIDTH / 2, SLASH_HEIGHT / 2, 0, scaleX, 1.5);\n      }\n\n      if (!jumping) {\n        runAnimation.getKeyFrame(stateTime, PlayMode.LOOP).draw(batch, x, y, PLAYER_SIZE, PLAYER_SIZE, originX, originY, 0, scaleX, 1);\n      } else {\n        firstJump = false;\n        jumpAnimation\n          .getKeyFrame(stateTime - jumpStart, PlayMode.NORMAL)\n          .draw(batch, x, y, (PLAYER_SIZE * 150) / 115, PLAYER_SIZE, originX, originY, 0, scaleX, 1);\n      }\n\n      // buff animation\n      if (buffTime >= stateTime) {\n        const frame = buffAnimation.getKeyFrame(stateTime - (buffTime - 2.5), PlayMode.LOOP_PINGPONG);\n        frame && frame.draw(batch, x, y, PLAYER_SIZE, PLAYER_SIZE, PLAYER_SIZE / 2, PLAYER_SIZE / 2, 0, 1.5, 1.5);\n      }\n\n      if (specialTime >= stateTime) {\n        const frame = buffAnimation.getKeyFrame(stateTime - (specialTime - 2.5), PlayMode.LOOP_PINGPONG);\n        frame && frame.draw(batch, x, y, PLAYER_SIZE, PLAYER_SIZE, PLAYER_SIZE / 2, PLAYER_SIZE / 2, 0, 1.5, 1.5);\n      }\n    }\n  };\n};\n","import { Vector2 } from 'gdxjs';\n\nexport const createObstacleSystem = (width, height, obstacles, WALL_LENGTH, WALL_THICKNESS, PROJECTILE_SPEED, PROJECTILE_SIZE) => {\n  const tmp = new Vector2();\n\n  return {\n    update(delta, y, stateTime) {\n      for (let obstacle of obstacles) {\n        if (obstacle.type > 0 && !obstacle.fired && Math.abs(obstacle.y - y) < WALL_LENGTH) {\n          obstacle.fired = true;\n          obstacle.projectilePos = new Vector2(obstacle.wallIndex === 0 ? WALL_THICKNESS : width - WALL_THICKNESS, obstacle.y);\n          const vel = new Vector2();\n          vel.set(obstacle.wallIndex === 0 ? PROJECTILE_SPEED : -PROJECTILE_SPEED, 0);\n          const rotation = -(Math.random() * Math.PI) / 6 - Math.PI / 18;\n          vel.rotateRad(obstacle.wallIndex === 0 ? rotation : -rotation);\n          obstacle.projectileVel = vel;\n          obstacle.projectileSize = PROJECTILE_SIZE;\n          obstacle.projectileStart = stateTime;\n        }\n        if (obstacle.fired) {\n          tmp.setVector(obstacle.projectileVel).scale(delta);\n          obstacle.projectilePos.addVector(tmp);\n        }\n      }\n    }\n  };\n};\n","import { fillRect, createAnimation } from 'gdxjs';\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\n\nconst OBSTACLE_NAMES = [null, 'bed', 'bath', 'tivi'];\n\nexport const createObstacleRenderSystem = (whiteTex, batch, obstacles, obstacleAtlas) => {\n  const animations = [];\n  const idleAnimations = [];\n  const bulletAnimations = [];\n\n  const projectileHitAnimation = createAnimation(0.05, obstacleAtlas.findRegions('bullet_hit').slice(1, -1));\n  const coinAnimation = createAnimation(0.05, obstacleAtlas.findRegions('coin'));\n\n  for (let i = 0; i < OBSTACLE_NAMES.length; i++) {\n    if (i === 0) continue;\n    const frames = obstacleAtlas.findRegions(OBSTACLE_NAMES[i]);\n    animations[i] = createAnimation(0.1, frames);\n    idleAnimations[i] = createAnimation(0.1, frames.slice(0, 4));\n    bulletAnimations[i] = createAnimation(0.1, obstacleAtlas.findRegions(`${OBSTACLE_NAMES[i]}_bullet`));\n  }\n\n  return {\n    draw(stateTime) {\n      for (let obstacle of obstacles) {\n        const scaleX = obstacle.wallIndex === 0 ? -1 : 1;\n        if (obstacle.type === 0) {\n          batch.setColor(0, 0, 0, 0.75);\n          !obstacle.hit && fillRect(batch, whiteTex, obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n          batch.setColor(1, 1, 1, 1);\n        } else {\n          if (obstacle.fired) {\n            !obstacle.hit &&\n              animations[obstacle.type]\n                .getKeyFrame(stateTime - obstacle.projectileStart, PlayMode.NORMAL)\n                .draw(batch, obstacle.x, obstacle.y, obstacle.width, obstacle.height, obstacle.width / 2, obstacle.height, 0, scaleX * 1.5, 1.5);\n            if (obstacle.projectileHit) {\n              if (stateTime - obstacle.projectileHitTime <= 11 * 0.05) {\n                batch.setColor(0, 0, 0, 0.25);\n                projectileHitAnimation\n                  .getKeyFrame(stateTime - obstacle.projectileHitTime, PlayMode.NORMAL)\n                  .draw(\n                    batch,\n                    obstacle.projectilePos.x - obstacle.projectileSize,\n                    obstacle.projectilePos.y,\n                    obstacle.projectileSize * 2,\n                    obstacle.projectileSize,\n                    obstacle.projectileSize,\n                    obstacle.projectileSize / 2,\n                    0,\n                    1.5,\n                    1.5\n                  );\n                batch.setColor(1, 1, 1, 1);\n                projectileHitAnimation\n                  .getKeyFrame(stateTime - obstacle.projectileHitTime, PlayMode.NORMAL)\n                  .draw(\n                    batch,\n                    obstacle.projectilePos.x - obstacle.projectileSize + obstacle.projectileSize * 0.05,\n                    obstacle.projectilePos.y + obstacle.projectileSize * 0.05,\n                    obstacle.projectileSize * 2,\n                    obstacle.projectileSize,\n                    obstacle.projectileSize,\n                    obstacle.projectileSize / 2,\n                    0,\n                    1.5,\n                    1.5\n                  );\n                coinAnimation\n                  .getKeyFrame(stateTime - obstacle.projectileHitTime, PlayMode.NORMAL)\n                  .draw(\n                    batch,\n                    obstacle.projectilePos.x,\n                    obstacle.projectilePos.y + obstacle.projectileSize / 2,\n                    obstacle.projectileSize,\n                    (obstacle.projectileSize / 8) * 10,\n                    obstacle.projectileSize / 2,\n                    0,\n                    0,\n                    2,\n                    2\n                  );\n              }\n            } else {\n              bulletAnimations[obstacle.type]\n                .getKeyFrame(stateTime, PlayMode.LOOP_PINGPONG)\n                .draw(\n                  batch,\n                  obstacle.projectilePos.x - obstacle.projectileSize / 2,\n                  obstacle.projectilePos.y - obstacle.projectileSize / 2,\n                  obstacle.projectileSize,\n                  obstacle.projectileSize,\n                  obstacle.projectileSize / 2,\n                  obstacle.projectileSize / 2,\n                  0,\n                  1.2,\n                  1.2\n                );\n            }\n          } else {\n            !obstacle.hit &&\n              idleAnimations[obstacle.type]\n                .getKeyFrame(stateTime, PlayMode.LOOP_PINGPONG)\n                .draw(batch, obstacle.x, obstacle.y, obstacle.width, obstacle.height, obstacle.width / 2, obstacle.height, 0, scaleX * 1.5, 1.5);\n          }\n        }\n      }\n    }\n  };\n};\n","import { createAnimation, fillRect } from 'gdxjs';\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\n\nexport const createDebuffRenderSystem = (width, height, whiteTex, batch, debuffs, obstacleAtlas, gender, outfit) => {\n  const obstacleHitBaseName = `ob_${gender === 0 ? 'man' : 'girl'}`;\n\n  const OBSTACLE_HIT_TYPE_NAME = [null, `${obstacleHitBaseName}_2`, `${obstacleHitBaseName}_3`, `${obstacleHitBaseName}_1`];\n\n  const sampleFrame = obstacleAtlas.findRegion('ob_man_1');\n\n  const DEBUFF_WIDTH = width / 2;\n  const DEBUFF_HEIGHT = (DEBUFF_WIDTH * sampleFrame.height) / sampleFrame.width;\n\n  const obstacleHitAnimations = [];\n  for (let i = 0; i < OBSTACLE_HIT_TYPE_NAME.length; i++) {\n    if (i === 0) continue;\n    const regions = obstacleAtlas.findRegions(OBSTACLE_HIT_TYPE_NAME[i]);\n    obstacleHitAnimations[i] = createAnimation(0.05, regions);\n  }\n\n  return {\n    draw(stateTime, y) {\n      if (debuffs.length > 0) {\n        batch.setColor(0, 0, 0, 0.5);\n        fillRect(batch, whiteTex, 0, y - height, width, height * 2);\n        batch.setColor(1, 1, 1, 1);\n      }\n      for (let debuff of debuffs) {\n        if (debuff.type === 0) continue;\n        const animation = obstacleHitAnimations[debuff.type];\n        animation\n          .getKeyFrame(stateTime - debuff.time, PlayMode.NORMAL)\n          .draw(\n            batch,\n            debuff.x - DEBUFF_WIDTH / 2,\n            y + 2 * debuff.offsetY - DEBUFF_HEIGHT / 2,\n            DEBUFF_WIDTH,\n            DEBUFF_HEIGHT,\n            DEBUFF_WIDTH / 2,\n            DEBUFF_HEIGHT / 2,\n            0,\n            debuff.flipped ? 1 : -1,\n            1\n          );\n      }\n    }\n  };\n};\n","export const createWatchSystem = (width, height, watches) => {\n  const WATCH_SIZE = width / 5;\n  let timeUntilNextWatch = 5;\n  let timeRandom = 0;\n  return {\n    update(delta, stateTime, y, outfit) {\n      timeUntilNextWatch -= delta;\n      if (timeUntilNextWatch <= 0) {\n        switch (outfit) {\n          case 0:\n            timeRandom = Math.random() * 10 - 6 + 6;\n            break;\n          case 1:\n            timeRandom = Math.random() * 6 - 4 + 4;\n            break;\n          case 2:\n            timeRandom = Math.random() * 10 - 4 + 4;\n            break;\n          default:\n            break;\n        }\n        timeUntilNextWatch = timeRandom;\n        watches.push({\n          x: width / 2,\n          y: y - height,\n          drawX: width / 2,\n          drawY: y - height,\n          drawScale: 1,\n          time: stateTime,\n          width: WATCH_SIZE,\n          height: WATCH_SIZE,\n          type: Math.floor(Math.random() * 3)\n        });\n      }\n      for (let i = watches.length - 1; i >= 0; i--) {\n        if (watches[i].y > y + 2 * height) {\n          watches.splice(i, 1);\n        }\n      }\n    }\n  };\n};\n","import { createAnimation } from 'gdxjs';\nimport { PlayMode } from 'gdxjs/lib/createAnimation';\n\nexport const createWatchRenderSystem = (width, height, batch, watchAtlas, watches, PLAYER_SIZE) => {\n  const watchAnimations = [];\n  for (let i = 0; i < 3; i++) {\n    watchAnimations.push(createAnimation(0.1, watchAtlas.findRegions(`watch_${i + 1}`)));\n  }\n  return {\n    draw(stateTime, x, y) {\n      for (let watch of watches) {\n        if (stateTime - watch.hitTime > 0.5) {\n          continue;\n        }\n        if (watch.hit) {\n          watch.drawX = watch.drawX + (x + PLAYER_SIZE / 2 - watch.drawX) * 0.2;\n          watch.drawY = watch.drawY + (y - watch.drawY) * 0.2;\n          watch.drawScale = watch.drawScale + (0.5 - watch.drawScale) * 0.2;\n        }\n        watchAnimations[watch.type]\n          .getKeyFrame(stateTime, PlayMode.LOOP)\n          .draw(\n            batch,\n            watch.drawX - watch.width / 2,\n            watch.drawY - watch.height / 2,\n            watch.width,\n            watch.height,\n            watch.width / 2,\n            watch.height / 2,\n            0,\n            watch.drawScale,\n            watch.drawScale\n          );\n      }\n    }\n  };\n};\n","import { Vector2 } from 'gdxjs';\n\nconst checkKerning = (id1, id2, kerningsData) => {\n  let check = false;\n  let amount = 0;\n  for (let kerning of kerningsData) {\n    if (kerning.first === id1 && kerning.second === id2) {\n      amount = kerning.amount;\n      check = true;\n      break;\n    } else {\n      check = false;\n    }\n  }\n  if (check) {\n    return amount;\n  } else {\n    return 0;\n  }\n};\n\nexport default class GlyphLayour {\n  constructor(pageImage, regions, keringsData, canvasWidth) {\n    this.pageImage = pageImage;\n    this.regions = regions;\n    this.kerningsData = keringsData;\n    this.canvasWidth = canvasWidth;\n    // this.canvasHeight = canvas.height;\n    this.type = 0;\n    this.align = 2;\n    this.lineHeight = pageImage.lineHeight;\n    this.baseLine = pageImage.base;\n    this.fixedWidth = canvasWidth;\n    // this.fixedHeight = canvas.height;\n    // temp variable\n    this.position = new Vector2(0, 0);\n    this.scale = 0;\n    this.newBase = 0;\n    this.oriWidth = 0;\n    this.oriHeight = 0;\n    this.positionBreak = []; // list of break-position's index\n    this.lastBreakIndex = 0;\n    // pre draw\n    this.cache = [];\n    this.preDraw = true;\n  }\n  addToCache = (line, px, py, lineBreak, lineH) => {\n    let xAdvance = 0;\n    for (let index = 0; index < line.length; index++) {\n      const currChar = line.charCodeAt(index);\n      const preChar = line.charCodeAt(index - 1);\n      let key = this.findRegions(currChar);\n      let kerningAmount = checkKerning(currChar, preChar, this.kerningsData);\n      this.cache.push({\n        key: key,\n        x: px + xAdvance + key.xoffset * this.scale + kerningAmount * this.scale,\n        y: py + key.yoffset * this.scale + lineBreak * this.scale + lineH,\n        width: key.width * this.scale,\n        height: key.height * this.scale\n      });\n      xAdvance += key.xadvance * this.scale;\n    }\n  };\n\n  beforeDrawing = (posX, posY, fontSize, CharSequence) => {\n    if (this.preDraw) {\n      let spaceXadvance = 0;\n      let tmpLength = 0;\n      let tmplist = [];\n      // find longest sequence\n      for (let i = 0; i < CharSequence.length; i++) {\n        const char = CharSequence.charCodeAt(i);\n        const key = this.findRegions(char);\n        if (char !== 32) {\n          tmpLength += key.xadvance * this.scale;\n        } else {\n          spaceXadvance = key.xadvance * this.scale;\n          tmplist.push(tmpLength);\n          tmpLength = 0;\n        }\n      }\n      let maxSeq = Math.max(...tmplist) + spaceXadvance;\n      //////////////////\n      this.newbase = fontSize;\n      this.scale = this.newbase / this.baseLine;\n      CharSequence = CharSequence.trim();\n\n      // split string between /n\n      let listCharSeq = CharSequence.split('/n').map(s => s.trim());\n      let lineH = 0;\n      for (let si = 0; si < listCharSeq.length; si++) {\n        CharSequence = listCharSeq[si];\n        // find new origin Width for each line\n        this.oriWidth = 0;\n        for (let i = 0; i < CharSequence.length; i++) {\n          const char = CharSequence.charCodeAt(i);\n          const key = this.findRegions(char);\n          if (i < CharSequence.length - 1) {\n            this.oriWidth += key.xadvance * this.scale;\n          } else {\n            this.oriWidth += key.width * this.scale;\n          }\n        }\n        let tmpRatio = this.oriWidth / this.fixedWidth;\n        lineH = this.lineHeight * this.scale * si;\n        let accumulate = 0;\n        let tmpChar = '';\n        let lineBreak = 0;\n        // finding position break and length of each line\n        // only execute if oriWidth > fixedWidth and fixedWidth > longest seq\n        if (tmpRatio > 1 && this.fixedWidth > maxSeq) {\n          for (let i = 0; i < CharSequence.length; i++) {\n            tmpChar += CharSequence[i];\n            const char = CharSequence.charCodeAt(i);\n            const key = this.findRegions(char);\n            accumulate += key.xadvance * this.scale;\n            // every line before last line\n            if (accumulate >= this.fixedWidth) {\n              let j = i;\n              while (j >= 0) {\n                i--;\n                j--;\n                const key2 = this.findRegions(CharSequence.charCodeAt(i));\n                accumulate -= key2.xadvance * this.scale;\n                tmpChar = tmpChar.substring(0, tmpChar.length - 1);\n                if (accumulate <= this.fixedWidth && key2.id === 32) {\n                  lineBreak = this.lineHeight * this.positionBreak.length;\n                  this.positionBreak.push(i); ///\n                  this.lastBreakIndex = i;\n                  const line = tmpChar.trim();\n                  let tmp = 0;\n                  let key3 = 0;\n\n                  for (let index = 0; index < line.length; index++) {\n                    key3 = this.findRegions(line.charCodeAt(index));\n                    if (index === line.length - 1) {\n                      tmp += key3.width * this.scale;\n                    } else {\n                      tmp += key3.xadvance * this.scale;\n                    }\n                  }\n                  let [px, py] = this.getPositionBasedOnMode(posX, posY, tmp);\n\n                  this.addToCache(line, px, py, lineBreak, lineH);\n\n                  accumulate = 0;\n                  j = -1;\n                  tmpChar = '';\n                }\n              }\n            }\n            // last line\n            if (i === CharSequence.length - 1 && accumulate < this.oriWidth) {\n              let tmpChar = '';\n              for (let j = this.lastBreakIndex; j <= i; j++) {\n                tmpChar += CharSequence[j];\n              }\n              const lastLine = tmpChar.trim();\n              let tmpXadvance = 0;\n              let lastKey = 0;\n              for (let index = 0; index < lastLine.length; index++) {\n                lastKey = this.findRegions(lastLine.charCodeAt(index));\n                if (index === lastLine.length - 1) {\n                  tmpXadvance += lastKey.width * this.scale;\n                } else {\n                  tmpXadvance += lastKey.xadvance * this.scale;\n                }\n              }\n              let [px, py] = this.getPositionBasedOnMode(posX, posY, tmpXadvance);\n              lineBreak = this.lineHeight * this.positionBreak.length;\n              this.addToCache(lastLine, px, py, lineBreak, lineH);\n            }\n          }\n\n          // this.oriHeight = this.newbase;\n          // this.preDraw = false;\n        }\n        // if originWidth < fixedWidth or fixedWidth < longest sequence\n        if (tmpRatio <= 1 || this.fixedWidth < maxSeq) {\n          let [px, py] = this.getPositionBasedOnMode(posX, posY, this.oriWidth);\n          this.addToCache(CharSequence, px, py, 0, lineH);\n          // this.preDraw = false;\n          // this.oriHeight = this.newbase;\n        }\n      }\n      if (this.type === 0) {\n        this.preDraw = false;\n      }\n      this.oriHeight = this.newbase;\n    }\n  };\n\n  getPositionBasedOnMode = (posX, posY, oriWidth) => {\n    if (this.align === 0) {\n      // posY -= Math.round(this.oriHeight / 2);\n      posX -= Math.round(oriWidth / 2);\n    } else if (this.align === 1) {\n      posX -= oriWidth;\n    }\n    return [posX, posY];\n  };\n\n  setAlignMode = mode => {\n    this.align = mode;\n  };\n\n  setType = type => {\n    this.type = type;\n  };\n\n  setLineHeight = lineHeight => {\n    this.lineHeight = lineHeight;\n  };\n\n  setFixedGlyphWidth = fixedW => {\n    this.fixedWidth = fixedW;\n    // this.fixedHeight = fixedH;\n  };\n\n  findRegions = id => {\n    for (let i = 0; i < this.regions.length; i++) {\n      if (this.regions[i].id === id) {\n        return this.regions[i];\n      }\n    }\n  };\n\n  draw = (batch, CharSequence = '', posX, posY, fontSize = this.baseLine) => {\n    if (this.type === 0) {\n      if (this.preDraw) {\n        this.beforeDrawing(posX, posY, fontSize, CharSequence);\n      }\n      for (let i = 0; i < this.cache.length; i++) {\n        let cache = this.cache[i];\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\n      }\n    }\n\n    if (this.type === 1) {\n      this.beforeDrawing(posX, posY, fontSize, CharSequence);\n      for (let i = 0; i < this.cache.length; i++) {\n        let cache = this.cache[i];\n        cache.key.draw(batch, cache.x, cache.y, cache.width, cache.height);\n      }\n      this.cache.length = 0;\n      this.positionBreak.length = 0;\n    }\n  };\n}\n","import { loadTexture, TextureRegion } from 'gdxjs';\n// import GlyphLayour from \"./glyphLayout\";\n// import GlyphLayour from \"./glyphLayout\";\nimport GlyphLayour from './glyphLayout';\n\nexport const AlignMode = {\n  center: 0,\n  right: 1,\n  left: 2\n};\n\nexport const TextType = {\n  static: 0,\n  dynamic: 1\n};\n\nfunction concatAndResolveUrl(url, concat) {\n  let url1 = url.split('/');\n  let url2 = concat.split('/');\n  let url3 = [];\n\n  for (let i = 0, l = url1.length; i < l; i++) {\n    if (url1[i] === '..') {\n      url3.pop();\n    } else if (url1[i] === '.') {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (let i = 0, l = url2.length; i < l; i++) {\n    if (url2[i] === '..') {\n      url3.pop();\n    } else if (url2[i] === '.') {\n      continue;\n    } else {\n      url3.push(url2[i]);\n    }\n  }\n\n  return url3.join('/');\n}\n\nexport default async (gl, packFileUrl, textureOptions) => {\n  const packFileContent = await fetch(packFileUrl).then(res => res.text());\n  const pages = [];\n  const regionsData = [];\n  const kerningsData = [];\n  let pageImage = null;\n  const lines = packFileContent.split('\\n');\n  let i = 0;\n  let tuple;\n  let tmp_array = [];\n  let push_to_kerning = false;\n\n  while (true) {\n    let line = lines[i];\n    if (line === undefined) {\n      push_to_kerning = false;\n      break;\n    }\n\n    if (line.split(' ').length === 2) {\n      const tmp = line.split(' ');\n      if (tmp[0] === 'kernings') {\n        push_to_kerning = true;\n      }\n      i++;\n      line = lines[i];\n    }\n    if (line.trim().length === 0) {\n      pageImage = null;\n    }\n    if (!push_to_kerning && pageImage !== null) {\n      tuple = line.split(' ').map(s => s.trim());\n      tuple = tuple.filter(item => item !== '');\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n      const id = parseInt(tmp_array[0], 10);\n      const left = parseInt(tmp_array[1], 10);\n      const top = parseInt(tmp_array[2], 10);\n      const width = parseInt(tmp_array[3], 10);\n      const height = parseInt(tmp_array[4], 10);\n      const xoffset = parseInt(tmp_array[5], 10);\n      const yoffset = parseInt(tmp_array[6], 10);\n      const xadvance = parseInt(tmp_array[7], 10);\n      const page = parseInt(tmp_array[8], 10);\n\n      const region = {\n        id,\n        left,\n        top,\n        width,\n        height,\n        xoffset,\n        yoffset,\n        xadvance,\n        page: pageImage,\n        id_page: page\n      };\n\n      regionsData.push(region);\n    }\n\n    if (push_to_kerning && pageImage !== null) {\n      tuple = line.split(' ').map(s => s.trim());\n      tuple = tuple.filter(item => item !== '');\n      tmp_array.length = 0;\n\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n      const first = parseInt(tmp_array[0], 10);\n      const second = parseInt(tmp_array[1], 10);\n      const amount = parseInt(tmp_array[2], 10);\n      kerningsData.push({ first, second, amount });\n    }\n\n    if (pageImage === null) {\n      tuple = line.split(' ').map(s => s.trim());\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n      const face = tmp_array[0];\n      const size = parseInt(tmp_array[1], 10);\n      const bold = parseInt(tmp_array[2], 10) === 0 ? false : true;\n      const italic = parseInt(tmp_array[3], 10) === 0 ? false : true;\n      const charset = tmp_array[4];\n      const unicode = parseInt(tmp_array[5], 10);\n      const stretchH = parseInt(tmp_array[6], 10); // percentage\n      const smooth = parseInt(tmp_array[7], 10);\n      const aa = parseInt(tmp_array[8], 10);\n      const padding = tmp_array[9].split(',').map(i => parseInt(i, 10));\n      const spacing = tmp_array[10].split(',').map(i => parseInt(i, 10));\n      const outline = parseInt(tmp_array[11], 10);\n\n      i++;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n      const lineHeight = parseInt(tmp_array[0], 10);\n      const base = parseInt(tmp_array[1], 10);\n      const scaleW = parseInt(tmp_array[2], 10);\n      const scaleH = parseInt(tmp_array[3], 10);\n      const num_of_pages = parseInt(tmp_array[4], 10);\n      const packed = parseInt(tmp_array[5], 10);\n      const alphaChnl = parseInt(tmp_array[6], 10);\n      const redChnl = parseInt(tmp_array[7], 10);\n      const greenChnl = parseInt(tmp_array[8], 10);\n      const blueChnl = parseInt(tmp_array[9], 10);\n\n      i++;\n      line = lines[i];\n      tmp_array.length = 0;\n      tuple = line.split(' ').map(s => s.trim());\n      for (let i = 1; i < tuple.length; i++) {\n        tmp_array.push(tuple[i].split('=')[1]);\n      }\n      const page_id = parseInt(tmp_array[0], 10);\n      const url = tmp_array[1].split('\"');\n      const file = concatAndResolveUrl(packFileUrl, `../${url[1]}`);\n      pageImage = {\n        file,\n        page_id,\n        face,\n        size,\n        bold,\n        italic,\n        charset,\n        unicode,\n        stretchH,\n        smooth,\n        aa,\n        padding,\n        spacing,\n        outline,\n        lineHeight,\n        base,\n        scaleW,\n        scaleH,\n        num_of_pages,\n        packed,\n        alphaChnl,\n        redChnl,\n        greenChnl,\n        blueChnl\n      };\n      pages.push(pageImage);\n    }\n    i++;\n  }\n\n  for (let page of pages) {\n    page.texture = await loadTexture(gl, page.file, textureOptions);\n    page.invTextWidth = 1 / page.texture.width;\n    page.invTextHeight = 1 / page.texture.height;\n  }\n\n  const regions = [];\n\n  for (let regionData of regionsData) {\n    const left = regionData.left;\n    const top = regionData.top;\n    const width = regionData.width;\n    const height = regionData.height;\n    const { texture, invTexWidth, invTexHeight } = regionData.page;\n    regions.push(new TextureRegion(texture, left, top, width, height, regionData, invTexWidth, invTexHeight));\n  }\n\n  return {\n    getLineHeight() {\n      return pageImage.lineHeight;\n    },\n\n    getPages() {\n      return pages;\n    },\n\n    getRegions() {\n      return regions;\n    },\n\n    findRegions(id) {\n      for (let i = 0; i < regions.length; i++) {\n        if (regions[i].id === id) {\n          return regions[i];\n        }\n      }\n    },\n\n    setNewText(canvasWidth) {\n      return new GlyphLayour(pageImage, regions, kerningsData, canvasWidth);\n    }\n  };\n  // return { pageImage, kerningsData, regionsData };\n};\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\n  const x = point.x * DEVICE_PIXEL_RATIO;\n  const y = point.y * DEVICE_PIXEL_RATIO;\n  const minX = Math.min(verts[0], verts[2], verts[4], verts[6]);\n  const maxX = Math.max(verts[0], verts[2], verts[4], verts[6]);\n  const minY = Math.min(verts[1], verts[3], verts[5], verts[7]);\n  const maxY = Math.max(verts[1], verts[3], verts[5], verts[7]);\n\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\n  return true;\n};\n","import createScreen from '../util/createScreen';\nimport { createGenderChoosingScreen } from './genderChoosingScreen';\nimport { createBatch, InputHandler, createOrthoCamera } from 'gdxjs';\nimport { AlignMode } from '../util/loadFontFile';\nimport createWhiteTex from 'gl-white-texture';\nimport { checkPointInsideRect } from '../util/coordUtil';\n\n// const coint_list = [0, 50, 200];\n\nexport const createEndScreen = async (Game, coinCount, distance, watch) => {\n  const goToChoosingScreen = async () => {\n    Game.setCurrentScreen(await createGenderChoosingScreen(Game));\n  };\n  const { gl, width, height, canvas, font, gender } = Game;\n  const endScreen = Game.assets.endScreen;\n  const { achive1, achive2, achive3, characterAtlas } = Game.assets;\n  const whiteTex = createWhiteTex(gl);\n\n  const inputHandler = new InputHandler(canvas);\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  // inputHandler.addEventListener('touchStart', (x, y) => {\n  //   goToChoosingScreen();\n  // });\n\n  const girl = characterAtlas.findRegion('girl_running_1', 0);\n  const man = characterAtlas.findRegion('man_running_1', 0);\n  const girl_size = [width / 7, ((width / 7) * girl.height) / girl.width];\n  const man_size = [width / 7, ((width / 7) * man.height) / man.width];\n\n  const coin = font.setNewText(width);\n  const lengthHaveGone = font.setNewText(width);\n  const watchCount = font.setNewText(width);\n  const playAgain = font.setNewText(width);\n  const eScreenW = width;\n  const eScreenH = (eScreenW * endScreen.height) / endScreen.width;\n\n  const achiveW = width / 20;\n  const achiveH = (achiveW * achive1.height) / achive1.width;\n\n  let ratio_list = [coinCount / 50, (coinCount - 50) / 150, (coinCount - 200) / 200];\n  for (let index in ratio_list) {\n    if (ratio_list[index] > 1) {\n      ratio_list[index] = 1;\n    }\n  }\n  if (coinCount <= 50) {\n    ratio_list[1] = ratio_list[2] = 0;\n  } else if (coinCount <= 200 && coinCount > 50) {\n    ratio_list[2] = 0;\n  } else if (coinCount === 400) {\n    ratio_list[2] = 1;\n  }\n  const rest_ratio = [\n    height / 4.5 + (height / 6) * 2 + height / 90 + (height / 6) * (1 - ratio_list[0]),\n    height / 4.5 + height / 6 + height / 180 + (height / 6) * (1 - ratio_list[1]),\n    height / 4.5 + (height / 6) * (1 - ratio_list[2])\n  ];\n  let stateTime = 0;\n  let startCount = true;\n  return createScreen({\n    update(delta) {\n      const link_rect = [\n        (width * 1.38) / 3,\n        (height * 1.55) / 3,\n        (width * 1.38) / 3 + width / 2.65,\n        (height * 1.55) / 3,\n        (width * 1.38) / 3,\n        (height * 1.55) / 3 + height / 15,\n        (width * 1.38) / 3 + width / 2.65,\n        (height * 1.55) / 3 + height / 15\n      ];\n\n      const reset_rect = [\n        (width * 0.94) / 3,\n        (height * 2.56) / 4,\n        (width * 0.94) / 3 + width / 2.65,\n        (height * 2.56) / 4,\n        (width * 0.94) / 3,\n        (height * 2.56) / 4 + width / 28,\n        (width * 0.94) / 3 + width / 2.65,\n        (height * 2.56) / 4 + width / 28\n      ];\n      if (startCount) {\n        stateTime += delta;\n      }\n      if (stateTime >= 1) {\n        stateTime = 0;\n        inputHandler.addEventListener('touchStart', (x, y) => {\n          let point = { x: x, y: y };\n          if (checkPointInsideRect(point, link_rect)) {\n            startCount = false;\n            window.location.href = 'https://curnonwatch.com/';\n          }\n          if (checkPointInsideRect(point, reset_rect)) {\n            startCount = false;\n            goToChoosingScreen();\n          }\n        });\n      }\n\n      camera.setPosition(0, 0);\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      batch.draw(endScreen, width / 2 - eScreenW / 2, height / 2 - eScreenH / 2, eScreenW, eScreenH);\n      batch.draw(achive1, width / 4.1 - achiveW * 1.3, height / 4.5 + (height / 6) * 2 + height / 60 - achiveH / 2, achiveW, achiveH);\n      batch.draw(achive2, width / 4.1 - achiveW * 1.3, height / 4.5 + height / 6 + height / 120 - achiveH / 2, achiveW, achiveH);\n      batch.draw(achive3, width / 4.1 - achiveW * 1.3, height / 4.5 - achiveH / 2, achiveW, achiveH);\n\n      batch.setColor(0.87, 0.87, 0.87, 1);\n      batch.draw(whiteTex, width / 4.1, height / 4.5, width / 38, height / 6);\n      batch.draw(whiteTex, width / 4.1, height / 4.5 + height / 6 + height / 180, width / 38, height / 6);\n      batch.draw(whiteTex, width / 4.1, height / 4.5 + (height / 6) * 2 + height / 90, width / 38, height / 6);\n\n      batch.setColor(1, 0.5, 0, 1);\n      batch.draw(whiteTex, width / 4.1, rest_ratio[0], width / 38, (height / 6) * ratio_list[0]);\n      batch.draw(whiteTex, width / 4.1, rest_ratio[1], width / 38, (height / 6) * ratio_list[1]);\n      batch.draw(whiteTex, width / 4.1, rest_ratio[2], width / 38, (height / 6) * ratio_list[2]);\n\n      batch.setColor(0, 0, 0, 1);\n      coin.setAlignMode(AlignMode.center);\n      coin.draw(batch, `x${coinCount}`, (width * 1.9) / 3, height / 2.65, width / 20);\n      watchCount.setAlignMode(AlignMode.center);\n      watchCount.draw(batch, `x${watch}`, (width * 2.2) / 3, height / 3.1, width / 20);\n      lengthHaveGone.setAlignMode(AlignMode.center);\n      lengthHaveGone.draw(batch, `${Math.floor((Math.floor(distance) * -1) / 10)}M`, (width * 1.93) / 3, height / 2.15, width / 14);\n      batch.setColor(1, 0, 0, 1);\n      playAgain.setAlignMode(AlignMode.center);\n      playAgain.draw(batch, 'TAP TO PLAY AGAIN', width / 2, (height * 2.56) / 4, width / 28);\n      // batch.setColor(1, 1, 0, 1);\n      // // batch.draw(whiteTex, (width * 1.38) / 3, (height * 1.55) / 3, width / 2.65, height / 15);\n      // batch.draw(whiteTex, (width * 0.94) / 3, (height * 2.56) / 4, width / 2.65, width / 28);\n\n      // draw charactor\n      batch.setColor(1, 1, 1, 1);\n      let girlY;\n      let manY;\n      if (coinCount <= 50) {\n        girlY = rest_ratio[0];\n        manY = rest_ratio[0];\n      } else if (coinCount > 50 && coinCount <= 200) {\n        girlY = rest_ratio[1];\n        manY = rest_ratio[1];\n      } else {\n        girlY = rest_ratio[2];\n        manY = rest_ratio[2];\n      }\n\n      if (gender === 0) {\n        man.draw(batch, width / 3.6, manY - man_size[1] / 2, man_size[0], man_size[1], man_size[0] / 2, man_size[1] / 2, 0, -1, 1);\n      } else {\n        girl.draw(batch, width / 3.6, girlY - girl_size[1] / 2, girl_size[0], girl_size[1], girl_size[0] / 2, girl_size[1] / 2, 0, -1, 1);\n      }\n      batch.end();\n    },\n    destroy() {\n      inputHandler.cleanup();\n      // document.removeEventListener('keydown', goToGameScreen);\n    }\n  });\n};\n","import createScreen from '../util/createScreen';\nimport { TextType } from '../util/loadFontFile';\nimport { createBatch, createOrthoCamera } from 'gdxjs';\nexport const renderCoin = (Game, coinCount) => {\n  const { gl, width, height, font } = Game;\n\n  const coinImage = Game.assets.coin;\n  const coinW = width / 17;\n  const coinH = (coinW * coinImage.height) / coinImage.width;\n  const text = font.setNewText(width);\n\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n\n  return createScreen({\n    update(coinCount) {\n      camera.setPosition(0, 0);\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.draw(coinImage, (width * 3.8) / 5, (height * 1) / 30, coinW, coinH);\n      // text.setFixedGlyphWidth(width / 10);\n      text.setType(TextType.dynamic);\n      batch.setColor(102 / 255, 51 / 255, 0, 1);\n      text.draw(batch, `${coinCount}`, (width * 4.15) / 5, (height * 1) / 30, width / 20);\n      batch.setColor(1, 1, 1, 1);\n      batch.end();\n    },\n    destroy() {}\n  });\n};\n","import { createBatch, createOrthoCamera } from 'gdxjs';\n\nexport const createBuffListRenderSystem = Game => {\n  const { gl, width, height, assets } = Game;\n  const watchAtlas = assets.watchAtlas;\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  let watchList = [];\n  for (let i = 0; i < 3; i++) {\n    watchList.push(watchAtlas.findRegion(`watch_${i + 1}`, 0));\n  }\n  let watchSize = width / 8.5;\n  let tmpDistance = 0;\n  return {\n    update(buffs) {\n      camera.setPosition(0, 0);\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      for (let i = 0; i < buffs.length; i++) {\n        if (buffs[i].state === 'zoomout') {\n          buffs[i].scale -= 0.1;\n          if (buffs[i].scale <= 0) {\n            buffs[i].state = 'visible';\n          }\n        }\n        if (buffs[i].state === 'enable' || buffs[i].state === 'zoomout') {\n          watchList[buffs[i].type].draw(\n            batch,\n            width / 8 + tmpDistance - watchSize / 2,\n            height / 18 - watchSize / 2,\n            watchSize,\n            watchSize,\n            watchSize / 2,\n            watchSize / 2,\n            0,\n            buffs[i].scale,\n            buffs[i].scale\n          );\n        }\n        if (buffs[i].state === 'visible') {\n          buffs.splice(i, 1);\n        }\n        tmpDistance += watchSize;\n      }\n      tmpDistance = 0;\n      batch.end();\n    }\n  };\n};\n","import { fillRect } from 'gdxjs';\n\nexport const specialButton = (batch, whiteTex, width, height, assets) => {\n  const button = assets.button;\n  const buttonR = width / 3.8;\n  batch.setColor(1, 1, 1, 1);\n  fillRect(batch, button, width / 2 - buttonR / 2, (height * 4.7) / 6, buttonR, buttonR);\n};\n","import createScreen from '../util/createScreen';\nimport { InputHandler, createBatch, createOrthoCamera } from 'gdxjs';\nimport createWhiteTex from 'gl-white-texture';\nimport { createDeadlineRenderSystem } from './system/DeadlineRenderSystem';\nimport { createBgRenderSystem } from './system/BgRenderSystem';\nimport { createParticleSystem } from './system/ParticleSystem';\nimport { createWallSystem } from './system/WallSystem';\nimport { createWallRenderSystem } from './system/WallRenderSystem';\nimport { createPlayerRenderSystem } from './system/PlayerRenderSystem';\nimport { createObstacleSystem } from './system/ObstacleSystem';\nimport { createObstacleRenderSystem } from './system/ObstacleRenderSystem';\nimport { createDebuffRenderSystem } from './system/DebuffRenderSystem';\nimport { createWatchSystem } from './system/WatchSystem';\nimport { createWatchRenderSystem } from './system/WatchRenderSystem';\nimport { createEndScreen } from './genderEndScreen';\nimport { renderCoin } from './coinRenderSystem';\nimport { createBuffListRenderSystem } from './system/BuffListRenderSystem';\nimport { checkPointInsideRect } from '../util/coordUtil';\n\n// import { specialButton } from './system/specialRenderSystem';\nimport { specialButton } from './specialRenderSystem';\nexport const createTestScreen = async Game => {\n  const { gender, gl, width, height, canvas, assets } = Game;\n  let outfit = 0;\n\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  const whiteTex = createWhiteTex(gl);\n  let inputHandler = new InputHandler(canvas);\n  const { bg1, bg2, deadLineAtlas, characterAtlas, slashAtlas, obstacleAtlas, noteTex, watchAtlas } = assets;\n\n  const BG_WIDTH = width;\n  const BG1_HEIGHT = (BG_WIDTH / bg1.width) * bg1.height;\n\n  const WALL_THICKNESS = width * 0.05;\n  const WALL_LENGTH = BG1_HEIGHT / 7;\n  const JUMP_SPEED_X = width * 2;\n  const NORMAL_SPEED_Y = -height * 0.75;\n  const PLAYER_SIZE = width / 5;\n  const INITIAL_GAP = height * 0.5;\n\n  let buffTime = 0;\n  let specialTime = 0;\n  let coinCount = 0;\n  let watchCount = 0;\n  const hasBuff = () => buffTime >= stateTime;\n  const hasSpecial = () => specialTime >= stateTime;\n  let x = WALL_THICKNESS;\n  let y = 0;\n  let speedX = 0;\n  let speedY = NORMAL_SPEED_Y;\n  let targetGap = INITIAL_GAP;\n  let gap = INITIAL_GAP;\n  let flipped = false;\n  let jumping = false;\n  const minX = WALL_THICKNESS;\n  const maxX = width - WALL_THICKNESS - PLAYER_SIZE;\n  let jumpStart = 0;\n\n  const wallStarts = [];\n  const debuffs = [];\n  const buffs = [];\n\n  const checkTouch = (x, y) => {\n    let useSpecial = false;\n    if (buffs.length === 3 && buffs[0].state === 'enable') {\n      const buttonR = width / 3.8;\n      const button_rect = [\n        width / 2 - buttonR / 2,\n        (height * 4.7) / 6,\n        width / 2 - buttonR / 2 + buttonR,\n        (height * 4.7) / 6,\n        width / 2 - buttonR / 2,\n        (height * 4.7) / 6 + buttonR,\n        width / 2 - buttonR / 2 + buttonR,\n        (height * 4.7) / 6 + buttonR\n      ];\n      let point = { x: x, y: y };\n      if (checkPointInsideRect(point, button_rect)) {\n        specialTime = stateTime + 2.5;\n        targetGap = targetGap + (INITIAL_GAP - targetGap) * 0.5;\n        for (let buff of buffs) {\n          buff.state = 'zoomout';\n        }\n        useSpecial = true;\n      }\n    }\n    !useSpecial && jump();\n  };\n\n  const jump = () => {\n    if (jumping || debuffs.length > 0) {\n      return;\n    }\n    speedX = flipped ? -JUMP_SPEED_X : JUMP_SPEED_X;\n    jumping = true;\n    jumpStart = stateTime;\n  };\n\n  inputHandler.addEventListener('touchStart', checkTouch);\n  document.addEventListener('keydown', jump);\n\n  const checkLanding = newX => {\n    if (!jumping) {\n      return;\n    }\n    let landing = false;\n    //\n    if (newX > maxX) {\n      x = maxX;\n      landing = true;\n    }\n\n    if (newX < minX) {\n      x = minX;\n      landing = true;\n    }\n\n    if (landing) {\n      speedX = 0;\n      jumping = false;\n      flipped = !flipped;\n    }\n    return landing;\n  };\n\n  const processPlayerPos = delta => {\n    let modifier = 1;\n    if (debuffs.length > 0) {\n      modifier = 0.5;\n    }\n    if (hasSpecial()) {\n      modifier *= 1.5;\n    }\n    y += speedY * delta * modifier;\n    const deltaX = speedX * delta;\n    if (!checkLanding(x + deltaX)) {\n      x += deltaX;\n    }\n  };\n\n  const processWatchCollsion = delta => {\n    const pL = x;\n    const pR = x + PLAYER_SIZE;\n    const pT = y;\n    const pB = y + PLAYER_SIZE;\n\n    for (let watch of watches) {\n      if (watch.hit) continue;\n\n      const oL = watch.x - watch.width / 2;\n      const oR = watch.x + watch.width / 2;\n      const oT = watch.y - watch.height / 2;\n      const oB = watch.y + watch.height / 2;\n      if (pL < oR && pR > oL && pT < oB && pB > oT) {\n        watchCount += 1;\n        watch.hit = true;\n        if (buffs.length <= 2) {\n          buffs.push({ type: watch.type, stateTime: 0, state: 'enable', scale: 1 });\n        }\n        watch.hitTime = stateTime;\n      }\n    }\n  };\n\n  const processObstacleCollision = delta => {\n    const pL = x;\n    const pR = x + PLAYER_SIZE;\n    const pT = y;\n    const pB = y + PLAYER_SIZE;\n\n    let hitted = false;\n\n    for (let obstacle of obstacles) {\n      if (obstacle.hit) continue;\n      const oWidth = obstacle.width;\n      const oHeight = obstacle.height;\n      const oL = obstacle.x;\n      const oR = obstacle.x + oWidth;\n      const oT = obstacle.y;\n      const oB = obstacle.y + oHeight;\n\n      if (pL < oR && pR > oL && pT < oB && pB > oT && !jumping) {\n        obstacle.hit = true;\n        if (buffs.length > 0) {\n          buffTime = stateTime + 0.2;\n          // targetGap = targetGap + (INITIAL_GAP - targetGap) * 0.5;\n          buffs[0].state = 'zoomout';\n          // buffs.shift();\n        }\n        if (!hasBuff() && !hasSpecial()) {\n          hitted = true;\n          debuffs.push({\n            time: stateTime,\n            duration: 1,\n            type: obstacle.type,\n            x: width / 2 + ((Math.random() - 0.5) * width) / 20,\n            offsetY: -((Math.random() * width) / 20 + width / 40),\n            flipped: flipped\n          });\n        }\n      }\n    }\n\n    for (let obstacle of obstacles) {\n      if (!obstacle.fired || obstacle.projectileHit) continue;\n      const pos = obstacle.projectilePos;\n      const size = obstacle.projectileSize;\n\n      const oL = pos.x - size / 3;\n      const oR = pos.x + size / 3;\n      const oT = pos.y - size / 3;\n      const oB = pos.y + size / 3;\n\n      if (pL < oR && pR > oL && pT < oB && pB > oT) {\n        obstacle.projectileHit = true;\n        obstacle.projectileHitTime = stateTime;\n        obstacle.projectileVel.set(0, speedY);\n        if (!jumping && !hasBuff() && !hasSpecial() && buffs.length === 0) {\n          debuffs.push({\n            time: stateTime,\n            duration: 1,\n            type: obstacle.type,\n            x: width / 2 + ((Math.random() - 0.5) * width) / 10,\n            offsetY: -((Math.random() * width) / 10 + width / 20),\n            flipped: flipped\n          });\n          obstacle.projectileVel.set(0, speedY / 2);\n          hitted = true;\n        } else {\n          if (buffs.length > 0 && !jumping) {\n            buffTime = stateTime + 0.2;\n            buffs[0].state = 'zoomout';\n          }\n          targetGap = targetGap + (INITIAL_GAP - height) * 0.1;\n          targetGap = Math.max(targetGap, INITIAL_GAP);\n          coinCount += 5;\n        }\n      }\n    }\n    if (hitted) {\n      targetGap = targetGap + (height - INITIAL_GAP) * 0.2;\n      const rate = deadlineRenderSystem.getDeadLineParticleRate();\n      deadlineRenderSystem.setDeadLineParticleRate(rate + (MAXIMUM_DEADLINE_RATE - rate) * 0.2);\n    }\n  };\n\n  let transitionTime = -2;\n\n  const OUTFIT_COIN_REQUIRED = [0, 50, 200];\n  const SPEED_MODIFIERS = [1, 1.25, 1.5];\n\n  const processOutfit = () => {\n    for (let i = 0; i < OUTFIT_COIN_REQUIRED.length; i++) {\n      if (outfit >= i) {\n        continue;\n      }\n      if (coinCount > OUTFIT_COIN_REQUIRED[i]) {\n        outfit = i;\n        transitionTime = stateTime;\n        speedY = NORMAL_SPEED_Y * SPEED_MODIFIERS[i];\n      }\n    }\n  };\n\n  const MAXIMUM_DEADLINE_RATE = 0.015;\n  const obstacles = [];\n  const watches = [];\n\n  const PROJECTILE_SPEED = width;\n  const PROJECTILE_SIZE = width / 7.5;\n\n  const deadlineRenderSystem = createDeadlineRenderSystem(width, height, deadLineAtlas, batch);\n  const bgRenderSystem = createBgRenderSystem(width, height, bg1, bg2, batch);\n  const particleSystem = createParticleSystem(width, height, noteTex, batch, PLAYER_SIZE);\n  const wallSystem = createWallSystem(width, height, wallStarts, obstacles, WALL_LENGTH, WALL_THICKNESS);\n  const wallRenderSystem = createWallRenderSystem(width, height, whiteTex, batch, wallStarts, WALL_LENGTH, WALL_THICKNESS);\n  const playerRenderSystem = createPlayerRenderSystem(width, height, batch, characterAtlas, slashAtlas, obstacleAtlas, watchAtlas, PLAYER_SIZE, gender, outfit);\n  const obstacleSystem = createObstacleSystem(width, height, obstacles, WALL_LENGTH, WALL_THICKNESS, PROJECTILE_SPEED, PROJECTILE_SIZE);\n  const obstacleRenderSystem = createObstacleRenderSystem(whiteTex, batch, obstacles, obstacleAtlas);\n  const debuffRenderSystem = createDebuffRenderSystem(width, height, whiteTex, batch, debuffs, obstacleAtlas, gender, outfit);\n  const watchSystem = createWatchSystem(width, height, watches, outfit);\n  const watchRenderSystem = createWatchRenderSystem(width, height, batch, watchAtlas, watches, PLAYER_SIZE);\n  const CoinRender = renderCoin(Game, coinCount);\n  const buffRender = createBuffListRenderSystem(Game);\n\n  let stateTime = 0;\n\n  const check_lost = () => {\n    if (gap >= height * 0.96) {\n      return true;\n    }\n    return false;\n  };\n\n  const update = async delta => {\n    if (!check_lost()) {\n      if (hasBuff() || hasSpecial()) {\n        debuffs.length = 0;\n      }\n      gap = gap + (targetGap - gap) * 0.02;\n      for (let i = debuffs.length - 1; i >= 0; i--) {\n        if (stateTime - debuffs[i].time >= debuffs[i].duration) {\n          debuffs.splice(i, 1);\n        }\n      }\n      stateTime += delta;\n      particleSystem.update(delta, x, y, speedY);\n      processPlayerPos(delta);\n      processObstacleCollision(delta);\n      processWatchCollsion(delta);\n      processOutfit();\n      obstacleSystem.update(delta, y, stateTime);\n      wallSystem.update(delta, y, gap);\n      watchSystem.update(delta, stateTime, y, outfit);\n\n      camera.setPosition(0, 0);\n      batch.setProjection(camera.combined);\n      batch.begin();\n      bgRenderSystem.update(delta, y, gap);\n      deadlineRenderSystem.update(delta, stateTime);\n      if (buffs.length === 3) {\n        specialButton(batch, whiteTex, width, height, assets);\n      }\n      batch.end();\n\n      buffRender.update(buffs);\n      CoinRender.update(coinCount);\n\n      camera.setPosition(0, y - gap);\n      batch.setProjection(camera.combined);\n      batch.begin();\n\n      particleSystem.draw();\n      playerRenderSystem.draw(x, y, flipped, jumping, stateTime, jumpStart, buffTime, outfit, transitionTime, specialTime);\n      watchRenderSystem.draw(stateTime, x, y);\n      wallRenderSystem.draw();\n      obstacleRenderSystem.draw(stateTime);\n      debuffRenderSystem.draw(stateTime, y);\n\n      batch.end();\n    } else {\n      Game.setCurrentScreen(await createEndScreen(Game, coinCount, y, watchCount));\n    }\n  };\n\n  return createScreen({\n    update,\n    destroy() {\n      inputHandler.cleanup();\n      document.removeEventListener('keydown', jump);\n    }\n  });\n};\n","import createScreen from '../util/createScreen';\nimport { createTestScreen } from './testScreen';\nimport { AlignMode } from '../util/loadFontFile';\nimport { createBatch, InputHandler, createOrthoCamera } from 'gdxjs';\n// import createWhiteTex from 'gl-white-texture';\nexport const createInstructionScreen = async Game => {\n  const goToGameScreen = async () => {\n    Game.setCurrentScreen(await createTestScreen(Game));\n  };\n  // document.addEventListener('keydown', goToGameScreen);\n\n  const { gl, width, height, canvas, font } = Game;\n  const inputHandler = new InputHandler(canvas);\n  const instruction = Game.assets.instruction;\n  const instrucW = width;\n  const instrucH = (instrucW * instruction.height) / instruction.width;\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  // const whiteTex = createWhiteTex(gl);\n\n  const text1 = font.setNewText(width);\n  const text2 = font.setNewText(width);\n  const text3 = font.setNewText(width);\n  const fontsize = width / 30;\n  // inputHandler.addEventListener('touchStart', (x, y) => {\n  //   goToGameScreen();\n  // });\n\n  let stateTime = 0;\n  let startCount = true;\n  return createScreen({\n    update(delta) {\n      if (startCount) {\n        stateTime += delta;\n      }\n      if (stateTime >= 1) {\n        stateTime = 0;\n        inputHandler.addEventListener('touchStart', (x, y) => {\n          startCount = false;\n          goToGameScreen();\n        });\n      }\n      camera.setPosition(0, 0);\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      batch.draw(instruction, width / 2 - instrucW / 2, height / 2 - instrucH / 2, instrucW, instrucH);\n\n      text1.setFixedGlyphWidth(width / 3);\n      text1.draw(batch, 'NHẤN VÀO MÀN HÌNH ĐỂ NHẢY', (width * 2) / 3, height / 7, fontsize);\n\n      text2.setAlignMode(AlignMode.right);\n      text2.setFixedGlyphWidth(width / 2.7);\n      text2.draw(batch, 'CHÉM NHỮNG VẬT TRÊN KHÔNG CÓ THỂ THU ĐƯỢC MỘT LƯỢNG VÀNG', width / 2.6, height / 2.6, fontsize);\n\n      text3.setFixedGlyphWidth(width / 3);\n      text3.draw(batch, 'THU THẬP ĐỦ SỐ LƯỢNG ĐỒNG HỒ SẼ GIÚP BẠN SỬ DỤNG KỸ NĂNG ĐẶC BIỆT', (width * 1.9) / 3, (height * 2.8) / 4, fontsize);\n      batch.end();\n    },\n    destroy() {\n      inputHandler.cleanup();\n      // document.removeEventListener('keydown', goToGameScreen);\n    }\n  });\n};\n","import createScreen from '../util/createScreen';\nimport { createInstructionScreen } from './genderInstructionScreen';\nimport { InputHandler, createBatch, createOrthoCamera } from 'gdxjs';\nimport { checkPointInsideRect } from '../util/coordUtil';\nimport { AlignMode, TextType } from '../util/loadFontFile';\n\nexport const createGenderChoosingScreen = Game => {\n  const goToInstructionScreen = async () => Game.setCurrentScreen(await createInstructionScreen(Game));\n  // document.addEventListener('keydown', goToInstructionScreen);\n\n  const { gl, width, height, assets, canvas, title } = Game;\n  const newText = title.setNewText(width);\n\n  const batch = createBatch(gl);\n  const camera = createOrthoCamera(width, height, width, height);\n  const inputHandler = new InputHandler(canvas);\n\n  const { woman, man, tray, bg2, bg1 } = assets;\n  const BG_WIDTH = width;\n  const BG_HEIGHT = (BG_WIDTH / bg1.width) * bg1.height;\n  const BG2_HEIGHT = (BG_WIDTH / bg2.width) * bg2.height;\n  const HUMAN_HEIGHT = height / 4;\n  const WOMAN_WIDTH = (HUMAN_HEIGHT * woman.width) / woman.height;\n  const MAN_WIDTH = (HUMAN_HEIGHT * man.width) / man.height;\n  const TRAY_WIDTH = width / 4;\n  const TRAY_HEIGHT = (TRAY_WIDTH * tray.height) / tray.width;\n\n  const trayX = width / 2 - TRAY_WIDTH / 2;\n  const trayY = (height * 2.2) / 3;\n\n  const man_rect = [\n    trayX - width / 5 + MAN_WIDTH / 2,\n    (height * 1.46) / 3,\n    trayX - width / 5 + TRAY_WIDTH / 2 + MAN_WIDTH,\n    (height * 1.46) / 3,\n    trayX - width / 5 + TRAY_WIDTH / 2,\n    (height * 1.46) / 3 + HUMAN_HEIGHT,\n    trayX - width / 5 + TRAY_WIDTH / 2 + MAN_WIDTH,\n    (height * 1.46) / 3 + HUMAN_HEIGHT\n  ];\n  const woman_rect = [\n    trayX + width / 5 + TRAY_WIDTH / 2 - WOMAN_WIDTH / 2,\n    (height * 1.46) / 3,\n    trayX + width / 5 + TRAY_WIDTH / 2 - WOMAN_WIDTH / 2 + WOMAN_WIDTH,\n    (height * 1.46) / 3,\n    trayX + width / 5 + TRAY_WIDTH / 2 - WOMAN_WIDTH / 2,\n    (height * 1.46) / 3 + HUMAN_HEIGHT,\n    trayX + width / 5 + TRAY_WIDTH / 2 - WOMAN_WIDTH / 2 + WOMAN_WIDTH,\n    (height * 1.46) / 3 + HUMAN_HEIGHT\n  ];\n  let point;\n  inputHandler.addEventListener('touchStart', (x, y) => {\n    point = { x: x, y: y };\n    if (checkPointInsideRect(point, man_rect)) {\n      Game.gender = 0;\n      goToInstructionScreen();\n    }\n    if (checkPointInsideRect(point, woman_rect)) {\n      Game.gender = 1;\n      goToInstructionScreen();\n    }\n  });\n\n  return createScreen({\n    update(delta) {\n      camera.setPosition(0, 0);\n      batch.setProjection(camera.combined);\n      batch.begin();\n\n      batch.draw(bg2, 0, 0, BG_WIDTH, BG2_HEIGHT);\n      batch.draw(bg1, 0, 0, BG_WIDTH, BG_HEIGHT);\n      batch.setColor(1, 0, 0, 1);\n      newText.setAlignMode(AlignMode.center);\n      newText.setType(TextType.dynamic);\n      newText.setFixedGlyphWidth(width);\n      batch.setColor(0, 51 / 255, 102 / 255, 1);\n      newText.draw(batch, 'LỰA CHỌN/n NHÂN VẬT CỦA BẠN', width / 2, height / 3.5, width / 18);\n\n      batch.setColor(1, 1, 1, 1);\n      batch.draw(man, trayX - width / 5 + MAN_WIDTH / 2, (height * 1.46) / 3, MAN_WIDTH, HUMAN_HEIGHT);\n      batch.draw(woman, trayX + width / 5 + TRAY_WIDTH / 2 - WOMAN_WIDTH / 2, (height * 1.46) / 3, WOMAN_WIDTH, HUMAN_HEIGHT);\n      batch.draw(tray, trayX - width / 5, trayY, TRAY_WIDTH, TRAY_HEIGHT);\n      batch.draw(tray, trayX + width / 5, trayY, TRAY_WIDTH, TRAY_HEIGHT);\n      batch.end();\n    },\n    destroy() {\n      inputHandler.cleanup();\n    }\n  });\n};\n","import './index.css';\n\nimport { resizeCanvas, createGameLoop, loadTexture, loadAtlas } from 'gdxjs';\nimport { createGenderChoosingScreen } from './screen/genderChoosingScreen';\nimport loadFontFile from './util/loadFontFile';\nconst init = async () => {\n  const canvas = document.getElementById('main');\n  const loading = document.getElementById('loading');\n  const [width, height] = resizeCanvas(canvas, 1);\n  const gl = canvas.getContext('webgl');\n  // const font = await loadFontFile(gl, './arial-32px.fnt');\n  const font = await loadFontFile(gl, './myriad.fnt');\n  const title = await loadFontFile(gl, './tittle.fnt');\n\n  const Game = {\n    title,\n    font,\n    width,\n    height,\n    canvas,\n    gl,\n    pixelRatio: 1,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.destroy();\n      }\n      Game.currentScreen = screen;\n    }\n  };\n\n  let count = 0;\n  loading.innerHTML = `Loading (${count} / 7)...`;\n  const doAndCount = promise =>\n    promise.then(result => {\n      count++;\n      loading.innerHTML = `Loading (${count} / 18)...`;\n      return result;\n    });\n\n  const [\n    bg1,\n    bg2,\n    deadLineAtlas,\n    characterAtlas,\n    slashAtlas,\n    obstacleAtlas,\n    noteTex,\n    watchAtlas,\n    man,\n    woman,\n    tray,\n    endScreen,\n    achive1,\n    achive2,\n    achive3,\n    manjump,\n    instruction,\n    coin,\n    button\n  ] = await Promise.all([\n    doAndCount(loadTexture(gl, './test-bg.png')),\n    doAndCount(loadTexture(gl, './test-bg2.jpg')),\n    doAndCount(loadAtlas(gl, './deadline.atlas')),\n    doAndCount(loadAtlas(gl, './test.atlas')),\n    doAndCount(loadAtlas(gl, './slash.atlas')),\n    doAndCount(loadAtlas(gl, './obstacle.atlas')),\n    doAndCount(loadTexture(gl, './note.png')),\n    doAndCount(loadAtlas(gl, './watch.atlas')),\n    doAndCount(loadTexture(gl, './man.png')),\n    doAndCount(loadTexture(gl, './woman.png')),\n    doAndCount(loadTexture(gl, './tray.png')),\n    doAndCount(loadTexture(gl, './end-screen.png')),\n    doAndCount(loadTexture(gl, './archivement_1.png')),\n    doAndCount(loadTexture(gl, './archivement_2.png')),\n    doAndCount(loadTexture(gl, './archivement_3.png')),\n    doAndCount(loadTexture(gl, './man jump.png')),\n    doAndCount(loadTexture(gl, './instruction.png')),\n    doAndCount(loadTexture(gl, './coin.png')),\n    doAndCount(loadTexture(gl, './button.png'))\n  ]);\n  const assets = {\n    bg1,\n    bg2,\n    deadLineAtlas,\n    characterAtlas,\n    slashAtlas,\n    obstacleAtlas,\n    noteTex,\n    watchAtlas,\n    man,\n    woman,\n    tray,\n    endScreen,\n    achive1,\n    achive2,\n    achive3,\n    manjump,\n    instruction,\n    coin,\n    button\n  };\n  Game.assets = assets;\n\n  Game.setCurrentScreen(await createGenderChoosingScreen(Game));\n  loading.style.display = 'none';\n\n  gl.clearColor(1, 1, 1, 1);\n  const update = delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n\n  createGameLoop(update);\n};\n\ninit();\n"],"sourceRoot":""}